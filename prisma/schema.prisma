generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Customer {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String @unique
  address     String
  idCard      String @unique
  phoneNumber String @unique

  reservations Reservation[]
  orders       Order[]
  giftCards    GiftCard[]
  loyalty      LoyaltyProgram?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String @unique
  address     String
  idCard      String @unique
  phoneNumber String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String @unique
  address     String
  idCard      String @unique
  phoneNumber String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id         Int      @id @default(autoincrement())
  date       DateTime
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  createdAt DateTime @default(now())
}

model Order {
  id          Int         @id @default(autoincrement())
  date        DateTime    @default(now())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  Int

  giftCardUsage  GiftCardUsage?
  kitchenDisplay KitchenDisplay?
}

model GiftCard {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  balance    Float
  expiryDate DateTime
  isActive   Boolean  @default(true)

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  usages GiftCardUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GiftCardUsage {
  id         Int      @id @default(autoincrement())
  giftCard   GiftCard @relation(fields: [giftCardId], references: [id])
  giftCardId Int

  usedAmount Float
  usedOn     DateTime @default(now())

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @unique

  createdAt DateTime @default(now())
}

model LoyaltyProgram {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique

  points      Int         @default(0)
  tier        LoyaltyTier @default(BRONZE)
  totalSpent  Float       @default(0)
  lastUpdated DateTime    @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KitchenDisplay {
  id      Int   @id @default(autoincrement())
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique

  status   OrderStatus @default(PENDING)
  priority Priority    @default(NORMAL)
  notes    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
